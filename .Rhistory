y <- ff(x)
ggsci::pal_aaas("default")(2)
data = as_tibble(cbind(x, y, ye = (y + rnorm(5000, 0, 0.025))))
p <- ggplot(data, aes(x=x, y=y)) +
geom_point(aes(x = x, y = ye), color = "#3B4992FF" , alpha = 0.075) +
geom_function(fun = ff, xlim = c(-1, 1)) +
geom_function(fun = ffinv, xlim = c(-0.975, 0.975), linetype = "dashed") +
theme_minimal() +
theme(legend.position="none",
plot.title = element_text(size = 18, face = "bold", vjust = 2),
plot.subtitle = element_text(size = 14, hjust = 0, vjust = 1),
plot.caption = element_text(size = 12, hjust = 0, vjust = -2),
panel.grid = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.title.x = element_text(size = 14, face = "bold"),
axis.title.y = element_text(size = 14, face = "bold")) +
#scale_x_continuous(expand = c(, 0)) +
#scale_y_continuous(expand = c(0, 0)) +
geom_linerange(aes(x = -1.1, ymin = -1.5, ymax = 1.5)) +
geom_linerange(aes(y = -1.5, xmin = -1.1, xmax = 1.1)) +
#geom_linerange(aes(y = tanh(-2*0.825), xmin = -1.2, xmax = 1), linetype = "dotted", linewidth = 1) +
#geom_linerange(aes(y = tanh(2*0.825), xmin = -1.2, xmax = 1), linetype = "dotted", linewidth = 1)  +
annotate("text", x = 1, y = ff(-1.5),
label =  expression(paste("y-values with (i) large H(X|Y=y) \n(ii) large density f(y), and \n(iii) large slope of inverse of g.")),
hjust = 0.9, size = 6) +
geom_segment(aes(x = 0.95, y = ff(-1) + 0.5, xend = 0.95, yend = tanh(2*0.825)), arrow = arrow(length = unit(0.5, "cm"))) +
geom_segment(aes(x = -0.2, y = ff(-1), xend = -0.85, yend = ff(-1)), arrow = arrow(length = unit(0.5, "cm"))) +
labs(#title = TeX("Additive noise model (Hoyer, 2008) in low noise regime."),
#subtitle = expression(paste("We assume X ~  U(-1, 1) and Y = g(x), where g(x) = tanh(2x). \nNote that the conditional entropy function H(X|y) is high at regions with a large slope of ", g^-1, "(y)")),
#caption = TeX("The solid curve corresponds to g() and the dashed line corresponds to its inverse. Motivated by an example from Janzing (2012).\n")
)
p <- ggMarginal(p, type="density", size = 4, fill = "#EE0000FF", alpha = 0.8)
p
require(pacman)
p_load(MASS, tidyverse, rmi)
require(pacman)
p_load(MASS, tidyverse, rmi)
rho <- 0.25
joint <- mvrnorm(1000, mu = c(0, 0), Sigma = cbind(c(1, rho), c(rho, 1)))
require(pacman)
p_load(MASS, tidyverse, rmi)
rho <- 0.25
joint <- mvrnorm(1000, mu = c(0, 0), Sigma = cbind(c(1, rho), c(rho, 1)))
f <- function(x){
sign(x)*(abs(x)^2)
}
x <- joint[,1]
y <- f(x) + joint[,2]
data.frame(x = x, y = y)
require(pacman)
p_load(MASS, tidyverse, rmi)
rho <- 0.25
joint <- mvrnorm(1000, mu = c(0, 0), Sigma = cbind(c(1, rho), c(rho, 1)))
f <- function(x){
sign(x)*(abs(x)^2)
}
x <- joint[,1]
y <- f(x) + joint[,2]
data.frame(x = x, y = y) %>%
ggplot(aes(x = x, y = y)) +
geom_point()
require(pacman)
p_load(MASS, tidyverse, rmi)
rho <- 0.25
joint <- mvrnorm(1000, mu = c(0, 0), Sigma = cbind(c(1, rho), c(rho, 1)))
f <- function(x){
sign(x)*(abs(x)^2)
}
x <- joint[,1]
y <- f(x) + joint[,2]/5
data.frame(x = x, y = y) %>%
ggplot(aes(x = x, y = y)) +
geom_point()
require(pacman)
p_load(MASS, tidyverse, rmi)
rho <- 0
joint <- mvrnorm(1000, mu = c(0, 0), Sigma = cbind(c(1, rho), c(rho, 1)))
f <- function(x){
sign(x)*(abs(x)^2)
}
x <- joint[,1]
y <- f(x) + joint[,2]/5
data.frame(x = x, y = y) %>%
ggplot(aes(x = x, y = y)) +
geom_point()
require(pacman)
p_load(MASS, tidyverse, rmi)
rho <- 0
joint <- mvrnorm(1000, mu = c(0, 0), Sigma = cbind(c(1, rho), c(rho, 1)))
f <- function(x){
sign(x)*(abs(x)^2)
}
x <- joint[,1]
y <- f(x) + joint[,2]/5
data.frame(x = x, y = y) %>%
ggplot(aes(x = x, y = y)) +
geom_point()
require(pacman)
p_load(MASS, tidyverse, rmi)
rho <- 0
joint <- mvrnorm(1000, mu = c(0, 0), Sigma = cbind(c(1, rho), c(rho, 1)))
f <- function(x){
sign(x)*(abs(x)^2)
}
x <- joint[,1]
y <- f(x) + joint[,2]/5
data.frame(x = x, y = y) %>%
ggplot(aes(x = x, y = y)) +
geom_point()
require(pacman)
p_load(MASS, tidyverse, rmi)
rho <- 0
joint <- mvrnorm(1000, mu = c(0, 0), Sigma = cbind(c(1, rho), c(rho, 1)))
f <- function(x){
sign(x)*(abs(x)^2)
}
x <- joint[,1]
y <- f(x) + joint[,2]/5
data.frame(x = x, y = y) %>%
ggplot(aes(x = x, y = y)) +
geom_point()
require(pacman)
p_load(MASS, tidyverse, rmi)
rho <- 0
joint <- mvrnorm(1000, mu = c(0, 0), Sigma = cbind(c(1, rho), c(rho, 1)))
f <- function(x){
sign(x)*(abs(x)^2)
}
x <- joint[,1]
y <- f(x) + joint[,2]/5
data.frame(x = x, y = y) %>%
ggplot(aes(x = x, y = y)) +
geom_point()
quantile(x, c(0.25, 0.75))
diff(quantile(x, c(0.25, 0.75)))
require(pacman)
p_load(MASS, tidyverse, rmi)
rho <- 0
joint <- mvrnorm(1000, mu = c(0, 0), Sigma = cbind(c(1, rho), c(rho, 1)))
f <- function(x){
sign(x)*(abs(x)^2)
}
x <- joint[,1]
y <- f(x) + joint[,2]/5
data.frame(x = x, y = y) %>%
ggplot(aes(x = x, y = y)) +
geom_point()
h <- 2*diff(quantile(x, c(0.25, 0.75)))/(length(x)^(1/3))
h
require(pacman)
p_load(MASS, tidyverse, rmi)
rho <- 0
joint <- mvrnorm(1000, mu = c(0, 0), Sigma = cbind(c(1, rho), c(rho, 1)))
f <- function(x){
sign(x)*(abs(x)^2)
}
x <- joint[,1]
y <- f(x) + joint[,2]/5
data.frame(x = x, y = y) %>%
ggplot(aes(x = x, y = y)) +
geom_point()
h <- as.numeric(2*diff(quantile(x, c(0.25, 0.75)))/(length(x)^(1/3)))
h
seq(min(x), max(h), by = h)
max(x)
min(x)
h
?seq
seq(min(x), max(h), length.out = ceiling((max(x) - min(x))/h + 1))
ceiling((max(x) - min(x))/h + 1)
seq(min(x), max(hx, length.out = ceiling((max(x) - min(x))/h + 1))
seq(min(x), max(x), length.out = ceiling((max(x) - min(x))/h + 1))
require(pacman)
p_load(MASS, tidyverse, rmi)
rho <- 0
joint <- mvrnorm(1000, mu = c(0, 0), Sigma = cbind(c(1, rho), c(rho, 1)))
f <- function(x){
sign(x)*(abs(x)^2)
}
x <- joint[,1]
y <- f(x) + joint[,2]/5
data.frame(x = x, y = y) %>%
ggplot(aes(x = x, y = y)) +
geom_point()
h <- as.numeric(2*diff(quantile(x, c(0.25, 0.75)))/(length(x)^(1/3)))
bins <- seq(min(x), max(x), length.out = ceiling((max(x) - min(x))/h + 1))
for(i in bins)
i. = 1
i = 1
bins[i]
y[x >= bins[i] & x <= bins[i+1]]
x >= bins[i] & x <= bins[i+1]
x[x >= bins[i] & x <= bins[i+1]]
i = 10
x[x >= bins[i] & x <= bins[i+1]]
y[x >= bins[i] & x <= bins[i+1]]
quantile(x, 0)
y[x >= as.numeric(quantile(x, i/100)) & x <= as.numeric(quantile(x, (i+1)/100))]
i = 0
lnn_entropy(y[x >= as.numeric(quantile(x, i/20)) & x <= as.numeric(quantile(x, (i+1)/20))])
require(pacman)
p_load(MASS, tidyverse, rmi)
rho <- 0
joint <- mvrnorm(1000, mu = c(0, 0), Sigma = cbind(c(1, rho), c(rho, 1)))
f <- function(x){
sign(x)*(abs(x)^2)
}
x <- joint[,1]
y <- f(x) + joint[,2]/5
data.frame(x = x, y = y) %>%
ggplot(aes(x = x, y = y)) +
geom_point()
h <- as.numeric(2*diff(quantile(x, c(0.25, 0.75)))/(length(x)^(1/3)))
bins <- seq(min(x), max(x), length.out = ceiling((max(x) - min(x))/h + 1))
niter <- 20
hy <- NULL
for(i in 0:(niter - 1)){
hy <- c(hy, lnn_entropy(y[x >= as.numeric(quantile(x, i/20)) & x <= as.numeric(quantile(x, (i+1)/20))]))
}
hy
plot(1:niter, hy)
require(pacman)
p_load(MASS, tidyverse, rmi)
rho <- 0
joint <- mvrnorm(1000, mu = c(0, 0), Sigma = cbind(c(1, rho), c(rho, 1)))
f <- function(x){
sign(x)*(abs(x)^2)
}
x <- joint[,1]
y <- f(x) + joint[,2]/5
data.frame(x = x, y = y) %>%
ggplot(aes(x = x, y = y)) +
geom_point()
h <- as.numeric(2*diff(quantile(x, c(0.25, 0.75)))/(length(x)^(1/3)))
bins <- seq(min(x), max(x), length.out = ceiling((max(x) - min(x))/h + 1))
niter <- 20
hy <- NULL
for(i in 0:(niter - 1)){
hy <- c(hy, lnn_entropy(y[x >= as.numeric(quantile(x, i/20)) & x <= as.numeric(quantile(x, (i+1)/20))]))
}
plot(1:niter, hy)
require(pacman)
p_load(MASS, tidyverse, rmi)
rho <- 0
joint <- mvrnorm(1000, mu = c(0, 0), Sigma = cbind(c(1, rho), c(rho, 1)))
f <- function(x){
sign(x)*(abs(x)^2)
}
x <- joint[,1]
y <- f(x) + joint[,2]/5
data.frame(x = x, y = y) %>%
ggplot(aes(x = x, y = y)) +
geom_point()
h <- as.numeric(2*diff(quantile(x, c(0.25, 0.75)))/(length(x)^(1/3)))
bins <- seq(min(x), max(x), length.out = ceiling((max(x) - min(x))/h + 1))
niter <- 20
hy <- NULL
for(i in 0:(niter - 1)){
hy <- c(hy, lnn_entropy(y[x >= as.numeric(quantile(x, i/20)) & x <= as.numeric(quantile(x, (i+1)/20))]))
}
plot(1:niter, hy)
require(pacman)
p_load(MASS, tidyverse, rmi)
rho <- 0
joint <- mvrnorm(10000, mu = c(0, 0), Sigma = cbind(c(1, rho), c(rho, 1)))
f <- function(x){
sign(x)*(abs(x)^2)
}
x <- joint[,1]
y <- f(x) + joint[,2]/5
data.frame(x = x, y = y) %>%
ggplot(aes(x = x, y = y)) +
geom_point()
h <- as.numeric(2*diff(quantile(x, c(0.25, 0.75)))/(length(x)^(1/3)))
bins <- seq(min(x), max(x), length.out = ceiling((max(x) - min(x))/h + 1))
niter <- 50
hy <- NULL
for(i in 0:(niter - 1)){
hy <- c(hy, lnn_entropy(y[x >= as.numeric(quantile(x, i/niter)) & x <= as.numeric(quantile(x, (i+1)/niter))]))
}
plot(1:niter, hy)
require(pacman)
p_load(MASS, tidyverse, rmi)
rho <- 0.5
joint <- mvrnorm(10000, mu = c(0, 0), Sigma = cbind(c(1, rho), c(rho, 1)))
f <- function(x){
sign(x)*(abs(x)^2)
}
x <- joint[,1]
y <- f(x) + joint[,2]/5
data.frame(x = x, y = y) %>%
ggplot(aes(x = x, y = y)) +
geom_point()
h <- as.numeric(2*diff(quantile(x, c(0.25, 0.75)))/(length(x)^(1/3)))
bins <- seq(min(x), max(x), length.out = ceiling((max(x) - min(x))/h + 1))
niter <- 50
hy <- NULL
for(i in 0:(niter - 1)){
hy <- c(hy, lnn_entropy(y[x >= as.numeric(quantile(x, i/niter)) & x <= as.numeric(quantile(x, (i+1)/niter))]))
}
plot(1:niter, hy)
require(pacman)
p_load(MASS, tidyverse, rmi)
rho <- 0.5
joint <- mvrnorm(10000, mu = c(0, 0), Sigma = cbind(c(1, rho), c(rho, 1)))
f <- function(x){
sign(x)*(abs(x)^2)
}
x <- joint[,1]
y <- f(x) + joint[,2]
data.frame(x = x, y = y) %>%
ggplot(aes(x = x, y = y)) +
geom_point()
h <- as.numeric(2*diff(quantile(x, c(0.25, 0.75)))/(length(x)^(1/3)))
bins <- seq(min(x), max(x), length.out = ceiling((max(x) - min(x))/h + 1))
niter <- 50
hy <- NULL
for(i in 0:(niter - 1)){
hy <- c(hy, lnn_entropy(y[x >= as.numeric(quantile(x, i/niter)) & x <= as.numeric(quantile(x, (i+1)/niter))]))
}
plot(1:niter, hy)
require(pacman)
p_load(MASS, tidyverse, rmi)
rho <- 0.85
joint <- mvrnorm(10000, mu = c(0, 0), Sigma = cbind(c(1, rho), c(rho, 1)))
f <- function(x){
sign(x)*(abs(x)^2)
}
x <- joint[,1]
y <- f(x) + joint[,2]
data.frame(x = x, y = y) %>%
ggplot(aes(x = x, y = y)) +
geom_point()
h <- as.numeric(2*diff(quantile(x, c(0.25, 0.75)))/(length(x)^(1/3)))
bins <- seq(min(x), max(x), length.out = ceiling((max(x) - min(x))/h + 1))
niter <- 50
hy <- NULL
for(i in 0:(niter - 1)){
hy <- c(hy, lnn_entropy(y[x >= as.numeric(quantile(x, i/niter)) & x <= as.numeric(quantile(x, (i+1)/niter))]))
}
plot(1:niter, hy)
require(pacman)
p_load(MASS, tidyverse, rmi)
rho <- 0
joint <- mvrnorm(10000, mu = c(0, 0), Sigma = cbind(c(1, rho), c(rho, 1)))
f <- function(x){
sign(x)*(abs(x)^2)
}
x <- joint[,1]
y <- f(x) + joint[,2]
data.frame(x = x, y = y) %>%
ggplot(aes(x = x, y = y)) +
geom_point()
h <- as.numeric(2*diff(quantile(x, c(0.25, 0.75)))/(length(x)^(1/3)))
bins <- seq(min(x), max(x), length.out = ceiling((max(x) - min(x))/h + 1))
niter <- 50
hy <- NULL
for(i in 0:(niter - 1)){
hy <- c(hy, lnn_entropy(y[x >= as.numeric(quantile(x, i/niter)) & x <= as.numeric(quantile(x, (i+1)/niter))]))
}
plot(1:niter, hy)
devtools::install_github("ropensci/tabulizer")
require(pacman)
p_load("tabulizerjars")
devtools::install("tabulizerjars")
devtools::install("ropensci/tabulizerjars")
devtools::install_github("ropensci/tabulizerjars")
install.packages("rJava")
devtools::install_github("ropensci/tabulizer")
devtools::install_github("ropensci/tabulizer")
ggplot() +
xlim(-5, 5) + geom_function(fun = dnorm)
require(tidyverse)
ggplot() +
xlim(-5, 5) + geom_function(fun = dnorm)
require(tidyverse)
ggplot() + xlim(0, 1) + geom_function(fun = dbeta, args = list(a = 2, b = 5))
?dbeta
require(tidyverse)
ggplot() + xlim(0, 1) + geom_function(fun = dbeta, args = list(shape1 = 2, shape2 = 5))
require(tidyverse)
ggplot() + xlim(0, 1) + geom_function(fun = dbeta, args = list(shape1 = 2, shape2 = 3))
require(tidyverse)
ggplot() + xlim(0, 1) + geom_function(fun = dbeta, args = list(shape1 = 2, shape2 = 3), color = "red")
require(tidyverse)
ggplot() + xlim(0, 1) + geom_function(fun = dbeta, args = list(shape1 = 2, shape2 = 2), color = "red")
mi_p <- function(p, se, sp){
p*(log(1-se) + se*log(se/(1-se))) + (1-p)*(log(1-sp) + sp*log(sp/(1-sp))) - (1 - sp + p*(sp + se - 1))*log(1 - sp + p*(se + sp -1)) - (sp + p*(1 - se - sp))*log(sp + p*(1 - se - sp))
}
sapply((1:100)/100, mi_p, se = 1, sp = 1)
mi_p <- function(p, se, sp){
p*(log(1-se) + se*log(se/(1-se))) + (1-p)*(log(1-sp) + sp*log(sp/(1-sp))) - (1 - sp + p*(sp + se - 1))*log(1 - sp + p*(se + sp -1)) - (sp + p*(1 - se - sp))*log(sp + p*(1 - se - sp))
}
sapply((1:100)/100, mi_p, se = 1, sp = 1)
mi_p <- function(p, se, sp){
p*(log(1-se) + se*log(se/(1-se))) + (1-p)*(log(1-sp) + sp*log(sp/(1-sp))) - (1 - sp + p*(sp + se - 1))*log(1 - sp + p*(se + sp -1)) - (sp + p*(1 - se - sp))*log(sp + p*(1 - se - sp))
}
sapply((1:100)/100, mi_p, se = 0.5, sp = 0.5)
mi_p <- function(p, se, sp){
p*(log(1-se) + se*log(se/(1-se))) + (1-p)*(log(1-sp) + sp*log(sp/(1-sp))) - (1 - sp + p*(sp + se - 1))*log(1 - sp + p*(se + sp -1)) - (sp + p*(1 - se - sp))*log(sp + p*(1 - se - sp))
}
sapply((1:100)/100, mi_p, se = 0.5, sp = 1)
0.392/(log(4*pi))
25.9/2
c(12.95, 12.95, 13.25, 8.75)
c(12.95, 12.95, 13.25, 8.75) + (13.25/4)
sum(c(12.95, 12.95, 13.25, 8.75)) + (13.25/4)
sum(c(12.95, 12.95, 13.25, 8.75)) + (13.25)
c(12.95, 12.95, 13.25, 8.75)) + (13.25/4)
c(12.95, 12.95, 13.25, 8.75) + (13.25/4)
(c(12.95, 12.95, 13.25, 8.75) + (13.25/4))*1.06
ifelse(x >= 0, abs(y), abs(-y))
x <- rnorm(1000)
y <- rnorm(1000)
ifelse(x >= 0, abs(y), abs(-y))
x <- rnorm(1000)
y <- rnorm(1000)
var(ifelse(x >= 0, abs(y), abs(-y)))
x <- rnorm(1000)
y <- rnorm(1000)
var(ifelse(x >= 0, abs(y), abs(-y)))
x <- rnorm(1000)
y <- rnorm(1000)
var(ifelse(x >= 0, abs(y), abs(-y)))
x <- rnorm(1000)
y <- rnorm(1000)
var(ifelse(x >= 0, abs(y), abs(-y)))
x <- rnorm(1000)
y <- rnorm(1000)
var(ifelse(x >= 0, abs(y), abs(-y)))
x <- rnorm(1000)
y <- rnorm(1000)
var(ifelse(x >= 0, abs(y), abs(-y)))
x <- rnorm(1000)
y <- rnorm(1000)
var(ifelse(x >= 0, abs(y), abs(-y)))
op <- replicate(1000,
x <- rnorm(1000)
y <- rnorm(1000)
op <- replicate(1000,
{x <- rnorm(1000)
y <- rnorm(1000)
var(ifelse(x >= 0, abs(y), abs(-y)))})
mean(op)
op <- replicate(1000,
{x <- rnorm(1000)
y <- rnorm(1000)
var(ifelse(x >= 0, abs(y), -abs(y)))})
op <- replicate(1000,
{x <- rnorm(1000)
y <- rnorm(1000)
var(ifelse(x >= 0, abs(y), -abs(y)))})
mean(op)
op <- replicate(1000,
{x <- rnorm(1000)
y <- rnorm(1000)
var(ifelse(x >= 0, abs(y), -abs(y)))})
mean(op)
op <- replicate(1000,
{x <- rnorm(1000)
y <- rnorm(1000)
var(ifelse(x >= 0, abs(y), -abs(y)))})
mean(op)
op <- replicate(1000,
{x <- rnorm(1000)
y <- rnorm(1000)
var(ifelse(x >= 0, abs(y), -abs(y)))})
mean(op)
?var()
pacman::p_load(workflowr)
pacman::p_load(workflowr)
wflow_git_config(user.name = "soumikp", user.email = "soumik@pitt.edu")
wflow_git_config(user.name = "soumikp", user.email = "soumik@pitt.edu", overwrite = TRUE)
pacman::p_load(workflowr, here)
here()
-log10(0.05)
-log10(0.05)
-log10(0.05/8)
base <-
ggplot() +
xlim(-5, 5)
require(ggplot2)
base <-
ggplot() +
xlim(-5, 5)
base + geom_function(fun = dnorm)
require(ggplot2)
base <-
ggplot() +
xlim(-5, 5)
base + geom_function(fun = rbeta, args = list(2, 2))
require(ggplot2)
base <-
ggplot() +
xlim(0, 1)
base + geom_function(fun = rbeta, args = list(2, 2))
require(ggplot2)
base <-
ggplot() +
xlim(0, 1)
base + geom_function(fun = dbeta, args = list(2, 2))
require(ggplot2)
base <-
ggplot() +
xlim(0, 1)
base + geom_function(fun = dbeta, args = list(1, 1))
require(ggplot2)
base <-
ggplot() +
xlim(0, 1)
base + geom_function(fun = dbeta, args = list(3, 3))
